{"version":3,"sources":["API/fetchUtils.js","components/modal.js","utils/podcastUtils.js","components/track.js","components/pagination.js","components/podcastDetailModal.js","components/podcast.js","App.js","serviceWorker.js","index.js"],"names":["searchPodcast","query","axios","get","api","params","entity","term","headers","ModalWrapper","children","className","ModalHeader","title","onCancel","aria-label","onClick","ModalBody","ModalFooter","getProxyURL","feedUrl","parser","Parser","customFields","parseTrackLinks","a","parseURL","feed","tracks","items","map","item","enclosure","push","url","Track","onPlay","currentTrack","icon","Pagination","onNext","onPrevious","pageNumbers","activePage","noNeighborPage","neighborPage","id","disabled","PodcastDetailModal","onClose","image","useState","setTracks","activeTracks","setActiveTracks","page","setPage","setCurrentTrack","currentAudioTrack","setCurrentAudioTrack","getTracks","splitEvery","useEffect","playAudio","pauseAudio","pause","play","closeModal","src","alt","track","Audio","selectAudio","length","Podcast","podcast","imageHD","modalActive","setModalActive","library","add","fas","App","podcasts","setPodcasts","pagePodcasts","setPagePodcasts","search","setSearch","setQuery","getPodcasts","activePodcasts","then","response","data","results","onSubmit","event","preventDefault","placeholder","type","value","onChange","target","collectionName","artworkUrl100","artworkUrl600","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0aac907.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://itunes.apple.com/search\";\r\n\r\nconst getUrl = api => (\r\n  `${baseUrl}/${api}`\r\n);\r\n\r\nexport const searchPodcast = query => (\r\n  axios.get(getUrl(\"search\"), {\r\n    params: {\r\n      entity:\"podcast\",\r\n      term: query\r\n    },\r\n    headers:{\r\n      'access-control-allow-origin': '*'\r\n    }\r\n  })\r\n);","import React from \"react\";\r\nimport \"./modal.scss\";\r\n\r\nexport const Modal = ({title, onCancel}) => (\r\n  <div className=\"modal is-active\">\r\n    <div className=\"modal-background\"></div>\r\n    <div className=\"modal-card\">\r\n      <header className=\"modal-card-head\">\r\n        <p className=\"modal-card-title\">{title}</p>\r\n        <button className=\"delete\" aria-label=\"close\" onClick={onCancel}></button>\r\n      </header>\r\n      <section className=\"modal-card-body\">\r\n      </section>\r\n      <footer className=\"modal-card-foot\">\r\n        <button className=\"button is-success\">Save changes</button>\r\n        <button className=\"button\" onClick={onCancel}>Cancel</button>\r\n      </footer>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport const ModalWrapper = ({children}) => (\r\n  <div className=\"modal is-active\">\r\n    <div className=\"modal-background\"></div>\r\n    <div className=\"modal-card\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport const ModalHeader = ({title, onCancel}) => (\r\n  <header className=\"modal-card-head\">\r\n    <p className=\"modal-card-title\">{title}</p>\r\n    <button className=\"delete\" aria-label=\"close\" onClick={onCancel}></button>\r\n  </header>\r\n);\r\n\r\nexport const ModalBody = ({children}) => (\r\n  <section className=\"modal-card-body\">\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport const ModalFooter = ({onCancel}) => (\r\n  <footer className=\"modal-card-foot\">\r\n    <button className=\"button\" onClick={onCancel}>Close</button>\r\n  </footer>\r\n);","import Parser from \"rss-parser\";\r\n\r\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\r\n\r\nconst getProxyURL = feedUrl => {\r\n  return `${CORS_PROXY}${feedUrl}`;\r\n};\r\n\r\nconst parser = new Parser({\r\n  customFields:{\r\n        \r\n  }\r\n});\r\n\r\nexport const parseTrackLinks = async feedUrl => {\r\n  //console.log(feedUrl);\r\n  const feed = await parser.parseURL(getProxyURL(feedUrl));\r\n  const tracks = [];\r\n  //console.log(feed.items);\r\n  feed.items.map(item => {\r\n    item.enclosure \r\n    && tracks.push({\r\n      title: item.title,\r\n      url: item.enclosure.url\r\n    });\r\n  });\r\n\r\n  return tracks;\r\n};","import React from \"react\";\r\nimport \"bulma/css/bulma.css\";\r\nimport \"./track.scss\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport const Track = ({title, url, onPlay, currentTrack}) => {\r\n  return(\r\n    <div className = \"track\">\r\n      <h1>{title}</h1>\r\n      <button className=\"button play is-fullwidth\" onClick={onPlay}>\r\n        <FontAwesomeIcon icon ={url === currentTrack ? \"pause\" : \"play\"}/>\r\n      </button>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport \"./pagination.scss\";\r\nimport { until } from \"ramda\";\r\n\r\nexport const Pagination = ({onNext, onPrevious, pageNumbers, activePage}) => {\r\n\r\n  const noNeighborPage = neighborPage =>(\r\n    neighborPage >= pageNumbers || neighborPage < 0 \r\n  );\r\n\r\n  return (\r\n    <div className=\"pagination\">\r\n      <ul id=\"pageNumberList\">\r\n        <button onClick={onPrevious} className=\"button previous\" disabled = {noNeighborPage(activePage-1)}>Prevous</button>\r\n        <button className=\"button\">{activePage + 1}</button>\r\n        <button onClick={onNext} className=\"button next\" disabled = {noNeighborPage(activePage+1)}>Next</button>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { ModalWrapper, ModalHeader, ModalBody, ModalFooter } from \"./modal\";\r\nimport {parseTrackLinks} from \"../utils/podcastUtils\";\r\nimport { Track } from \"./track\";\r\nimport \"./podcastDetailModal.scss\";\r\nimport { splitEvery, set, length } from \"ramda\";\r\nimport { Pagination } from \"./pagination\";\r\n\r\nexport const PodcastDetailModal = ({title, onClose, image, feedUrl}) => {\r\n\r\n  const[tracks, setTracks] = useState([]);\r\n  const[activeTracks, setActiveTracks] = useState([]);\r\n  const[page, setPage] = useState(0);\r\n  const[currentTrack, setCurrentTrack] = useState(\"\");\r\n  const[currentAudioTrack, setCurrentAudioTrack] = useState(null);\r\n\r\n  const getTracks = async feedUrl => {\r\n    setTracks(splitEvery(10, await parseTrackLinks(feedUrl)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTracks(feedUrl);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setActiveTracks(tracks[page]);\r\n  }, [page, tracks]);\r\n\r\n  useEffect(() => {\r\n    playAudio();\r\n  }, [currentAudioTrack]);\r\n\r\n  const nextPage = () => {\r\n    setPage(page + 1);\r\n  };\r\n\r\n  const previousPage = () => {\r\n    setPage(page - 1);\r\n  };\r\n\r\n  const selectAudio = track => {\r\n    pauseAudio();\r\n    if(track.url === currentTrack) {\r\n      setCurrentTrack(null);\r\n      pauseAudio();\r\n    } else {\r\n      setCurrentTrack(track.url);\r\n      setCurrentAudioTrack(new Audio(track.url));\r\n    }\r\n  };\r\n\r\n  const pauseAudio = () => {\r\n    currentAudioTrack && currentAudioTrack.pause();\r\n  };\r\n\r\n  const playAudio = () => {\r\n    currentAudioTrack && currentAudioTrack.play();\r\n  };\r\n\r\n  const closeModal = () => {\r\n    pauseAudio();\r\n    onClose();\r\n  };\r\n  \r\n  return(\r\n    <ModalWrapper>\r\n      <ModalHeader\r\n        title = {title}\r\n        onCancel = {closeModal}\r\n      />\r\n      <ModalBody>\r\n        <div className = \"image\">\r\n          <img src = {image} alt = \"\"/>\r\n        </div>\r\n        {activeTracks && activeTracks.map(track => (\r\n          <Track\r\n            title={track.title}\r\n            url={track.url}\r\n            currentTrack ={currentTrack}\r\n            onPlay={() => selectAudio(track)}\r\n          />\r\n        ))}\r\n        <Pagination\r\n          activePage = {page}\r\n          pageNumbers = {length(tracks)}\r\n          onNext = {nextPage}\r\n          onPrevious = {previousPage}\r\n        />\r\n      </ModalBody>\r\n      <ModalFooter\r\n        onCancel = {closeModal}\r\n      />\r\n    </ModalWrapper>\r\n  );    \r\n};","import React from \"react\";\r\nimport {useState} from \"react\";\r\nimport \"bulma/css/bulma.css\";\r\nimport \"./podcast.scss\";\r\nimport { Modal } from \"./modal\";\r\nimport { PodcastDetailModal } from \"./podcastDetailModal\";\r\n\r\n\r\nexport const Podcast = ({podcast:{feedUrl}, title, image, imageHD}) => {\r\n\r\n  const activateModal = () => {\r\n    setModalActive(true);\r\n  };\r\n\r\n  const deactivateModal = () => {\r\n    setModalActive(false);\r\n  };\r\n\r\n  const getImage = () => {\r\n    return imageHD ? imageHD : image;\r\n  };\r\n\r\n  const [modalActive, setModalActive] = useState(false);\r\n  return(\r\n    <>\r\n      {modalActive &&\r\n        <PodcastDetailModal\r\n          onClose={deactivateModal}\r\n          title={title}\r\n          image = {getImage()}\r\n          feedUrl = {feedUrl}\r\n        />\r\n      }\r\n      <div onClick={activateModal} className=\"podcast column is-3\">\r\n        <h1>{title}</h1>\r\n        <div className=\"image\">\r\n          <img src={image} alt={title}/>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport { searchPodcast } from './API/fetchUtils';\nimport { Podcast } from './components/podcast';\nimport { Modal } from './components/modal';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { splitEvery, length } from 'ramda';\nimport { Pagination } from './components/pagination';\n\nlibrary.add(fas);\nconst App = () => {\n\n  const [podcasts, setPodcasts] = useState([]);\n  const [pagePodcasts, setPagePodcasts] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState('soccer');\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    getPodcasts();\n  }, [query]);\n\n  useEffect(() => {\n    activePodcasts();\n  }, [page, podcasts]);\n\n  const updateSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search);\n  };\n\n  const getPodcasts = async () => {\n    //console.log(\"Getting podcasts\");\n    searchPodcast(query)\n      .then(response => {\n        //console.log(response.data.results);\n        setPodcasts(splitEvery(10, response.data.results));\n      });\n  };\n\n  const activePodcasts = () => {\n    setPagePodcasts(podcasts[page]);\n  };\n\n  //Missing add index in map\n  return(\n    <div className = \"App\">\n      <div className=\"header\">\n        <h1>Poddy Web</h1>\n      </div>\n      <form onSubmit = {getSearch} className = \"search-form\">\n        <input placeholder=\"Enter keyword\" type=\"text\" className = \"search-bar\" value={search} onChange={updateSearch}/>\n        <button type=\"submit\" className = \"search-button\">Search\n        </button>\n      </form>\n      <Pagination\n        activePage={page}\n        onNext = {() => setPage(page + 1)}\n        onPrevious = {() => setPage(page - 1)}\n        pageNumbers = {length(podcasts)}\n      />\n      <div className=\"podcasts\">\n        {pagePodcasts && pagePodcasts.map(podcast => (\n          <Podcast\n            podcast = {podcast}\n            title = {podcast.collectionName}\n            image = {podcast.artworkUrl100}\n            imageHD = {podcast.artworkUrl600}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}